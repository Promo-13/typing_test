// components/site-header.tsx
import Link from 'next/link';
import Button from './button';
import { Keyboard, BookOpenText, Palette } from 'lucide-react';

const SiteHeader = ({ onOpenThemes }) => {
  return (
    <header className="flex items-center justify-between px-4 py-2">
      <Link href="/" className="flex items-center gap-2 font-semibold text-[var(--tc-primary)] hover:opacity-90">
        <Keyboard className="h-5 w-5" />
        <span className="tracking-tight">TypeClone</span>
      </Link>
      <nav className="flex items-center gap-2">
        <Link href="/lessons" className="inline-flex items-center gap-2 rounded-md px-3 py-2 text-sm text-[var(--tc-muted)] hover:text-[var(--tc-primary)]">
          <BookOpenText className="h-4 w-4" />
          <span className="hidden sm:inline">Lessons</span>
        </Link>
        <Button variant="outline" size="sm" onClick={() => onOpenThemes?.()} className="inline-flex items-center gap-2 bg-transparent border-[var(--tc-caret)] text-[var(--tc-primary)] hover:bg-[var(--tc-caret)] hover:text-white">
          <Palette className="h-4 w-4" />
          Themes
        </Button>
      </nav>
    </header>
  );
};

export default SiteHeader;

// components/typing-test.tsx
import Button from './button';

const TypingTest = ({ onRestart }) => {
  return (
    <div className="flex justify-center">
      <Button variant="outline" size="sm" onClick={onRestart} className="gap-2 bg-transparent border-[var(--tc-caret)] text-[var(--tc-primary)] hover:bg-[var(--tc-caret)] hover:text-white">
        Restart
      </Button>
    </div>
  );
};

export default TypingTest;

// app/page.tsx
import React from 'react';

const HomePage = () => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-2xl font-semibold tracking-tight text-[var(--tc-primary)]">Home Page</h1>
      {/* ** rest of code here ** */}
    </div>
  );
};

export default HomePage;

// app/lessons/[slug]/page.tsx
import React from 'react';

const LessonPage = () => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-2xl font-semibold tracking-tight text-[var(--tc-primary)]">Lesson Page</h1>
      {/* ** rest of code here ** */}
    </div>
  );
};

export default LessonPage;

// app/lessons/page.tsx
import React from 'react';
import Button from '../components/button';

const LessonsPage = () => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-2xl font-semibold tracking-tight text-[var(--tc-primary)]">Lessons</h1>
      <Button variant="outline" size="sm" className="shrink-0 bg-transparent border-[var(--tc-caret)] text-[var(--tc-primary)] hover:bg-[var(--tc-caret)] hover:text-white">
        Start
      </Button>
      {/* ** rest of code here ** */}
    </div>
  );
};

export default LessonsPage;

// components/theme-picker.tsx
import React from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from './dialog';
import { THEMES } from '../data/themes';

const ThemePicker = ({ selected, setSelected }) => {
  return (
    <Dialog open={true}>
      <DialogContent className="max-h-[80vh] overflow-y-auto">
        {THEMES.map((t) => {
          const isActive = selected.id === t.id;
          return (
            <button
              key={t.id}
              onClick={() => setSelected(t)}
              className={`group relative flex min-w-0 items-center gap-3 overflow-hidden rounded-lg border p-3 transition hover:shadow-sm ${isActive ? 'border-foreground' : 'border-border'}`}
              aria-pressed={isActive}
            >
              <div className="flex items-center gap-1.5 shrink-0">
                {t.preview.map((c, i) => (
                  <span key={i} className="h-6 w-6 rounded-md border" style={{ backgroundColor: c }} aria-hidden />
                ))}
              </div>
              <div className="min-w-0 text-left">
                <div className="text-sm font-medium break-words">{t.name}</div>
                <div className="text-xs text-muted-foreground truncate">{t.id}</div>
              </div>
            </button>
          );
        })}
      </DialogContent>
    </Dialog>
  );
};

export default ThemePicker;
